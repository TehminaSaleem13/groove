class ProductsController < ApplicationController
  include ProductConcern

  def import_products
    @store = Store.find(params[:id])
    importservice = init_products_import_service(@store)
    @result = importservice.import_products

    render json: @result
  end

  def import_images
    @store = Store.find(params[:id])
    @result = @product_service.import_images(@store)

    render json: @result
  end

  # PS:Where is this used?
  def import_product_details
    # if current_user.can?('import_products')
    #   @store = Store.find(params[:store_id])
    #   @amazon_credentials = AmazonCredentials.where(:store_id => @store.id)

    #   if @amazon_credentials.length > 0
    #     @credential = @amazon_credentials.first

    #     require 'mws-connect'

    #     mws = Mws.connect(
    #       merchant: @credential.merchant_id,
    #       access: ENV['AMAZON_MWS_ACCESS_KEY_ID'],
    #       secret: ENV['AMAZON_MWS_SECRET_ACCESS_KEY']
    #     )
    #     products_api = mws.products.get_matching_products_for_id(:marketplace_id => @credential.marketplace_id,
    #                                                              :id_type => 'SellerSKU', :id_list => ['T-TOOL'])
    #     require 'active_support/core_ext/hash/conversions'
    #     product_hash = Hash.from_xml(products_api.to_s)
    #     # product_hash = from_xml(products_api)
    #     raise
    #     # response = mws.orders.get_matching_product_for_id :id_type=>'SellerSKU', :seller_sku => ["12345678"],
    #     #   :marketplace_id => @credential.marketplace_id
    #     # # response = mws.orders.list_orders :last_updated_after => 2.months.ago,
    #     # #   :order_status => ['Unshipped', 'PartiallyShipped']
    #     # response.products
    #     @products = Product.where(:store_id => params[:store_id])
    #     @products.each do |product|
    #       #import_amazon_product_details(mws, @credential, product.id)
    #     end
    #   end

    # end
  end

  # def requestamazonreport
  #   @amazon_credentials = AmazonCredentials.where(:store_id => params[:id])
  #   @result = Hash.new
  #   @result['status'] = false
  #   if @amazon_credentials.length > 0

  #     @credential = @amazon_credentials.first

  #     mws = MWS.new(:aws_access_key_id => ENV['AMAZON_MWS_ACCESS_KEY_ID'],
  #                   :secret_access_key => ENV['AMAZON_MWS_SECRET_ACCESS_KEY'],
  #                   :seller_id => @credential.merchant_id,
  #                   :marketplace_id => @credential.marketplace_id)

  #     response = mws.reports.request_report :report_type => '_GET_MERCHANT_LISTINGS_DATA_'
  #     @credential.productreport_id = response.report_request_info.report_request_id
  #     @credential.productgenerated_report_id = nil

  #     if @credential.save
  #       @result['status'] = true
  #       @result['requestedreport_id'] = @credential.productreport_id
  #     end

  #   end

  #   respond_to do |format|
  #     format.json { render json: @result }
  #   end
  # end

  # def checkamazonreportstatus
  #   @amazon_credentials = AmazonCredentials.where(:store_id => params[:id])
  #   @result = Hash.new
  #   @result['status'] = false
  #   report_found = false
  #   if @amazon_credentials.length > 0

  #     @credential = @amazon_credentials.first

  #     mws = MWS.new(:aws_access_key_id => ENV['AMAZON_MWS_ACCESS_KEY_ID'],
  #                   :secret_access_key => ENV['AMAZON_MWS_SECRET_ACCESS_KEY'],
  #                   :seller_id => @credential.merchant_id,
  #                   :marketplace_id => @credential.marketplace_id)

  #     @report_list = mws.reports.get_report_request_list
  #     @report_list.report_request_info.each do |report_request|
  #       if report_request.report_request_id == @credential.productreport_id
  #         report_found = true
  #         if report_request.report_processing_status == '_SUBMITTED_'
  #           @result['status'] = true
  #           @result['report_status'] = 'Report has been submitted successfully. '+
  #             'It is still being generated by the server.'
  #         elsif report_request.report_processing_status == '_DONE_'
  #           @result['report_status'] = 'Report is generated successfully.'

  #           @credential.productgenerated_report_id = report_request.generated_report_id
  #           @credential.productgenerated_report_date = report_request.completed_date
  #           if @credential.save
  #             @result['status'] = true
  #             @result['requestedreport_id'] = @credential.productreport_id
  #             @result['generated_report_id'] = report_request.generated_report_id
  #             @result['generated_report_date'] = report_request.completed_date
  #           end
  #         elsif report_request.report_processing_status == '_INPROGRESS_'
  #           @result['status'] = true
  #           @result['report_status'] = 'Report is in progress. It will be ready in few moments.'
  #         else
  #           @result['response'] = report_request
  #           #store generated report id
  #         end
  #       end
  #     end

  #     if !report_found
  #       @result['status'] = true
  #       @result['report_status'] = 'Report is not found. Please check back in few moments.'
  #     end
  #   end

  #   respond_to do |format|
  #     format.json { render json: @result }
  #   end
  # end

  # Get list of products based on limit and offset. It is by default sorted by updated_at field
  # If sort parameter is passed in then the corresponding sort filter will be used to sort the list
  # The expected parameters in params[:sort] are 'updated_at', name', 'sku', 'status', 'barcode', 'location_primary'
  # and quantity. The API supports to provide order of sorting namely ascending or descending. The parameter can be
  # passed in using params[:order] = 'ASC' or params[:order] ='DESC' [Note: Caps letters] By default, if no order is mentioned,
  # then the API considers order to be descending.The API also supports a product status filter.
  # The filter expects one of the following parameters in params[:filter] 'all', 'active', 'inactive', 'new'.
  # If no filter is passed, then the API will default to 'active'
  # if you would like to get Kits, specify params[:is_kit] to 1. it will return product kits and the corresponding skus
  #
  def index
    @products = do_getproducts(params)
    @result = @result.merge({ 'products' => make_products_list(@products),
                              'products_count' => get_products_count()
                            })
    render json: @result
  end

  def create
    @result = Product.create_new_product(@result, current_user)

    render json: @result
  end

  def print_receiving_label
    @products = list_selected_products(params)

    respond_to do |format|
      format.html # show.html.erb
      format.json {
        time = Time.now
        tenant = Apartment::Tenant.current
        file_name = "receiving_label_#{tenant}_" +time.strftime('%d_%b_%Y_%I_%M_%S')
        @result['receiving_label_path'] = '/pdfs/'+ file_name + '.pdf'
        pathname = Rails.root.join('public', 'pdfs', "#{file_name}.pdf")
        render :pdf => file_name,
               :template => 'products/print_receiving_label',
               :orientation => 'portrait',
               :page_height => '6in',
               :save_only => true,
               :page_width => '4in',
               :margin => {:top => '1',
                           :bottom => '0',
                           :left => '2',
                           :right => '2'},
               :handlers => [:erb],
               :formats => [:html],
               :save_to_file => pathname
        object = GroovS3.create_receiving_label_pdf(tenant, file_name, File.open(pathname).read)
        @result["receiving_label_path"] = object.url
        render json: @result
      }
    end
  end

  def generate_barcode
    @products =
      list_selected_products(params)
      .includes(:product_kit_skuss, :product_barcodes, :product_skus, :product_kit_activities)

    product_ids = @products.pluck(:id)

    
    # To reduce individual product query fire on order items

      option_products_if_kit_one = Product.where(
          id: @products.where(is_kit: 1).map{|p| p.product_kit_skuss.collect(&:option_product_id)}.flatten
        )
      multi_product_order_items =
        OrderItem.where(product_id: product_ids, scanned_status: 'notscanned')
        .includes(order: [order_items: [:product, :order_item_kit_products]])

      kit_skus_if_kit_zero =
        ProductKitSkus.where(option_product_id: @products.where(is_kit: 0).pluck(:id))
        .includes(product: :product_kit_skuss)

      multi_base_sku_products = Product.where(base_sku: @products.map(&:primary_sku))

      eager_loaded_obj = {
        multi_product_order_items: multi_product_order_items,
        kit_skus_if_kit_zero: kit_skus_if_kit_zero,
        option_products_if_kit_one: option_products_if_kit_one,
        multi_base_sku_products: multi_base_sku_products
      }
    #--------------------

    @products.each { |product| @result = product.generate_barcode(@result, eager_loaded_obj) }

    render json: @result
  end

  # For search pass in parameter params[:search] and a params[:limit] and params[:offset].
  # If limit and offset are not passed, then it will be default to 10 and 0
  def search
    unless params[:search].blank?
      @products = do_search(params, false)
      @result = @result.merge({ 'products' => make_products_list(@products['products']),
                                'products_count' => get_products_count
                              })
      @result['products_count']['search'] = @products['count']
    else
      @result['status'] = false
      @result['message'] = 'Improper search string'
    end

    render json: @result
  end

  def scan_per_product
    execute_scan_per_product

    render json: @result
  end

  def change_product_status
    #execute_groove_bulk_action(activity)
    execute_groove_bulk_action('status_update')
  end

  def delete_product
    #execute_groove_bulk_action(activity)
    execute_groove_bulk_action('delete')
  end

  def duplicate_product
    #execute_groove_bulk_action(activity)
    execute_groove_bulk_action('duplicate')
  end

  def show
    service_obj = ProductService::ProductInfo.new(params: params, current_user: current_user, result: @result)
    @result = service_obj.get_product_info

    render json: @result
  end

  def add_product_to_kit
    #@kit is coming from find_kit_product method of products concern
    @result = ProductKitSkus.app_product_to_kit(@kit, params, @result) if check_if_not_a_kit

    render json: @result
  end

  def remove_products_from_kit
    #@kit is coming from find_kit_product method of products concern
    @result = ProductKitSkus.remove_products_from_kit(@kit, params, @result) if check_if_not_a_kit

    render json: @result
  end

  def update
    @result = gp_products_module.update_product_attributes

    render json: @result
  end

  #params[:id]
  def generate_barcode_slip
    @product = Product.find(params[:id])

    respond_to do |format|
      format.html
      format.pdf {
        render :pdf => "file_name",
               :template => "products/#{get_barcode_slip_template}",
               :orientation => 'Portrait',
               :page_height => '1in',
               :page_width => '3in',
               :margin => {:top => '0', :bottom => '0', :left => '0', :right => '0'}
      }
    end
  end

  def update_product_list
    @result = Product.update_product_list(params, @result)
    render json: @result
  end

  #This action will remove the entry for this product (the Alias) and the SKU of this new
  #product will be added to the list of skus for the existing product that the user is linking it to.
  #Any product can be turned into an alias, it doesn’t have to have the status of new, although most if the time it probably will.
  #The operation can not be undone.
  #If you had a situation where the newly imported product was actually the one you wanted to keep you could
  #find the original product and make it an alias of the new product...
  def set_alias
    product_aliasing.set_alias

    render json: @result
  end

  def add_image
    product = Product.find(params[:id])
    add_new_image(product)

    render json: @result
  end

  #input params[:id] gives product id params[:inv_wh_id] gives inventory warehouse id
  #params[:inventory_count] contains the inventory count from the recount
  #params[:method] this can contain two options: 'recount' or 'receive'
  #PUT request and it updates the available inventory if method is recount
  # or adds to the available inventory if method is receive if the product is
  #not associated with the inventory warehouse, then it automatically associates it and
  #sets the value.
  def adjust_available_inventory
    unless params[:id].nil? || params[:inv_wh_id].nil? || params[:method].nil?
      result = ProductInventoryWarehouses.adjust_available_inventory(params, result)
    else
      @result['status'] &= false
      @result['error_messages'].push('Cannot recount inventory without product id and inventory_warehouse_id')
    end
    render json: @result
  end

  def generate_products_csv
    if current_user.can? 'create_backups'
      @result = generate_csv(@result)
    else
      @result['status'] = false
      @result['messages'].push('You do not have enough permissions to create backup csv')
    end
    @result = generate_error_csv(@result) unless @result['status']

    render json: @result
  end

  def update_intangibleness
    Product.update_action_intangibleness(params)

    render json: @result
  end

  def update_image
    @result['status'] = ProductImage.update_image(params)
    render json: @result
  end

  def sync_with
    @result['status'] = SyncOption.create_update_sync_option(params)
    render json: @result
  end

  private
  def execute_groove_bulk_action(activity)
    GrooveBulkActions.execute_groove_bulk_action(activity, params, current_user)

    render json: @result
  end
end
