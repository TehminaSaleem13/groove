require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe OrdersController do

  before(:each) do 
    @user = FactoryGirl.create(:user, :import_orders=> "1", :name=>'Admin')
    sign_in @user
  end

  describe "Order" do
    it "should get details of the packing user" do
	  request.accept = "application/json"
	  order = FactoryGirl.create(:order, :status=>'awaiting', :packing_user_id=> @user.id)

	  get :getdetails, {:id => order.id}

	  expect(response.status).to eq(200)
	  result = JSON.parse(response.body)
	  expect(result['status']).to eq(true)
	  expect(result['order']['users'][0]['name']).to eq("Nobody")
	  expect(result['order']['users'][1]['name']).to eq(@user.name+" (Packing User)")
    end


    it "should record exception with the user" do
	  request.accept = "application/json"
	  order = FactoryGirl.create(:order, :status=>'awaiting')

	  put :recordexception, {:id => order.id, :reason=>'Missing item',
	  	:description=>'Test Description', :assoc=>{:id=> @user.id, :name=>@user.name} }

	  expect(response.status).to eq(200)
	  result = JSON.parse(response.body)
	  expect(result['status']).to eq(true)
    end
  end

  describe "GET order pick list" do
    it "retrieves pick list for an order" do
      request.accept = "application/json"

      #set up of data      
      #Inventory warehouse
      inv_wh = FactoryGirl.create(:inventory_warehouse)
      
      #Store
      store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)

      #Create products
      product = FactoryGirl.create(:product)
      product_sku = FactoryGirl.create(:product_sku, 
      	:product=> product)
      product_inv_wh = FactoryGirl.create(
      	:product_inventory_warehouse, :product=> product,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25)

      #Order
      order = FactoryGirl.create(:order, :status=>'awaiting', :store=>store)
      
      #Order item
      order_item = FactoryGirl.create(:order_item, :product_id=>product.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product.name)

      #execution
      get :generate_pick_list, {:id => order.id }

      #expectations
      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      expect(result["status"]).to eq(true)

      expect(result["data"]["pick_list"].length).to eq(1)
      expect(result["data"]["pick_list"].first["sku"]).
      	to eq("IPHONE5S")
      expect(result["data"]["pick_list"].first["primary_location"]).
      	to eq("A1")
      expect(result["data"]["pick_list"].first["secondary_location"]).
      	to eq("H4")
      expect(result["data"]["pick_list"].first["name"]).
      	to eq("Apple iPhone 5S")
    end
  end  
end
