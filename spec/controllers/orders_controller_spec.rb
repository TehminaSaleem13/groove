# require 'spec_helper'
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe OrdersController do

  before(:each) do
    @user_role = FactoryGirl.create(:role,:name=>'order_controller_tester_scan_pack')
    @user = FactoryGirl.create(:user,:name=>'Order Controller Tester', :username=>"order_controller_tester", :role=>@user_role)
    sign_in @user

    @copy_order_l = lambda do |order|
      order_data = Hash.new
      order_data['notes_fromPacker'] =  order.notes_fromPacker
      order_data['notes_internal'] =  order.notes_internal
      order_data['notes_toPacker'] =  order.notes_toPacker
      order_data['firstname'] = order.firstname
      order_data['lastname'] = order.lastname
      order_data['company'] = order.company
      order_data['address_1'] = order.address_1
      order_data['address_2'] = order.address_2
      order_data['city'] = order.city
      order_data['state'] = order.state
      order_data['postcode'] = order.postcode
      order_data['country'] = order.country
      order_data['email'] = order.email
      order_data['order_placed_time'] = order.order_placed_time
      order_data['customer_comments'] = order.customer_comments
      order_data['scanned_on'] = order.scanned_on
      order_data['tracking_num'] = order.tracking_num
      return order_data
    end
  end

  describe "Order" do
    it "Should not allow editing order data without permissions" do
      request.accept = "application/json"
      order = FactoryGirl.create(:order, :status=>'awaiting', :packing_user_id=> @user.id)
      order_data = @copy_order_l.call(order)
      order_data['firstname'] = "Test"

      post :update, {id: order.id, order: order_data}

      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      expect(result['status']).to eq(false)
      expect(result['messages'][0]).to eq('You do not have enough permissions to edit the order')
    end

    it "Should allow editing order data with permissions" do
      request.accept = "application/json"
      order = FactoryGirl.create(:order, :status=>'awaiting', :packing_user_id=> @user.id)
      order_data = @copy_order_l.call(order)
      order_data['firstname'] = "Test"
      order_data['increment_id'] = '12345678'
      @user_role.add_edit_order_items = true
      @user_role.save

      post :update, {id: order.id, order: order_data}

      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      expect(result['status']).to eq(true)
    end

    it "Should not allow editing notes without permissions" do
      request.accept = "application/json"
      order = FactoryGirl.create(:order, :status=>'awaiting', :packing_user_id=> @user.id)
      order_data = @copy_order_l.call(order)
      order_data['notes_internal'] = "Test"

      post :update, {id: order.id, order: order_data}

      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      expect(result['status']).to eq(false)
      expect(result['messages'][0]).to eq('You do not have the permissions to edit notes')
    end

    it "Should allow editing notes with permissions" do
      request.accept = "application/json"
      order = FactoryGirl.create(:order, :status=>'awaiting', :packing_user_id=> @user.id)
      order_data = @copy_order_l.call(order)
      order_data['notes_internal'] = "Test"
      order_data['increment_id'] = '12345678'
      @user_role.create_edit_notes = true
      @user_role.add_edit_order_items = true
      @user_role.save

      post :update, {id: order.id, order: order_data}

      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      expect(result['status']).to eq(true)
    end

    it "Should allow editing notes with add_edit order items permissions" do
      request.accept = "application/json"
      order = FactoryGirl.create(:order, :status=>'awaiting', :packing_user_id=> @user.id)
      order_data = @copy_order_l.call(order)
      order_data['notes_internal'] = "Test2"
      order_data['increment_id'] = '12345678'
      @user_role.add_edit_order_items = true
      @user_role.save

      post :update, {id: order.id, order: order_data}

      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      expect(result['status']).to eq(true)
    end

    it "should get details of the packing user" do
	  request.accept = "application/json"
	  order = FactoryGirl.create(:order, :status=>'awaiting', :packing_user_id=> @user.id)

	  get :getdetails, {:id => order.id}

	  expect(response.status).to eq(200)
	  result = JSON.parse(response.body)
	  expect(result['status']).to eq(true)
	  expect(result['order']['users'][0]['name']).to eq("Nobody")
	  expect(result['order']['users'][1]['name']).to eq("#{@user.name} (Packing User)")
    end


    it "should not record exception with the user without permission" do
	  request.accept = "application/json"
	  order = FactoryGirl.create(:order, :status=>'awaiting')

	  put :recordexception, {:id => order.id, :reason=>'Missing item',
	  	:description=>'Test Description', :assoc=>{:id=> @user.id, :name=>@user.name} }

	  expect(response.status).to eq(200)
	  result = JSON.parse(response.body)
	  expect(result['status']).to eq(false)
    end

    it "should record exception with the user with permission" do
      request.accept = "application/json"

      order = FactoryGirl.create(:order, :status=>'awaiting')
      @user_role.create_packing_ex = true
      @user_role.save


      put :recordexception, {:id => order.id, :reason=>'Missing item',
                             :description=>'Test Description', :assoc=>{:id=> @user.id, :name=>@user.name} }

      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      expect(result['status']).to eq(true)
    end

    it "inventory gets adjusted when order is deleted" do
      request.accept = "application/json"
      inv_wh = FactoryGirl.create(:inventory_warehouse)
      store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)
      @user_role.add_edit_order_items = true
      @user_role.save
      order = FactoryGirl.create(:order, :status=>'awaiting', :increment_id=>'1234567890', :store => store)
      product1 = FactoryGirl.create(:product)
      product2 = FactoryGirl.create(:product)
      order_item1 = FactoryGirl.create(:order_item, :product_id=>product1.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product1.name, :inv_status=>'allocated')
      order_item2 = FactoryGirl.create(:order_item, :product_id=>product2.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product2.name, :inv_status=>'allocated')
      product_inv_wh1 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product1,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)
      product_inv_wh2 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product2,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)
      put :deleteorder, {:order_ids=>[order.id]}
      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      product_inv_wh1.reload
      product_inv_wh2.reload
      expect(product_inv_wh1.allocated_inv).to eq(4)
      expect(product_inv_wh2.allocated_inv).to eq(4)
      expect(product_inv_wh1.available_inv).to eq(26)
      expect(product_inv_wh2.available_inv).to eq(26)
    end

    it "inventory gets adjusted when order is moved from awaiting to cancelled" do
      request.accept = "application/json"
      inv_wh = FactoryGirl.create(:inventory_warehouse)
      store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)
      @user_role.add_edit_order_items = true
      @user_role.save
      general_setting = FactoryGirl.create(:general_setting, :inventory_tracking=>true, :hold_orders_due_to_inventory=>true, :inventory_auto_allocation=>true)
      order = FactoryGirl.create(:order, :status=>'awaiting', :increment_id=>'1234567890', :store => store)
      product1 = FactoryGirl.create(:product)
      product2 = FactoryGirl.create(:product)
      order_item1 = FactoryGirl.create(:order_item, :product_id=>product1.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product1.name, :inv_status=>'allocated')
      order_item2 = FactoryGirl.create(:order_item, :product_id=>product2.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product2.name, :inv_status=>'allocated')
      product_inv_wh1 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product1,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)
      product_inv_wh2 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product2,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)
      put :changeorderstatus, {:order_ids=>[order.id], :status=>'cancelled'}
      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      product_inv_wh1.reload
      product_inv_wh2.reload
      order_item1.reload
      order_item2.reload
      expect(order_item1.inv_status).to eq('unallocated')
      expect(order_item2.inv_status).to eq('unallocated')
      expect(product_inv_wh1.allocated_inv).to eq(4)
      expect(product_inv_wh2.allocated_inv).to eq(4)
      expect(product_inv_wh1.available_inv).to eq(26)
      expect(product_inv_wh2.available_inv).to eq(26)
    end

    it "inventory gets adjusted when order is moved from serviceissue to cancelled" do
      request.accept = "application/json"
      inv_wh = FactoryGirl.create(:inventory_warehouse)
      store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)
      @user_role.add_edit_order_items = true
      @user_role.save
      general_setting = FactoryGirl.create(:general_setting, :inventory_tracking=>true, :hold_orders_due_to_inventory=>true, :inventory_auto_allocation=>true)
      order = FactoryGirl.create(:order, :status=>'serviceissue', :increment_id=>'12345678911', :store => store)
      product1 = FactoryGirl.create(:product)
      product2 = FactoryGirl.create(:product)
      order_item1 = FactoryGirl.create(:order_item, :product_id=>product1.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product1.name, :inv_status=>'allocated')
      order_item2 = FactoryGirl.create(:order_item, :product_id=>product2.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product2.name, :inv_status=>'allocated')
      product_inv_wh1 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product1,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)
      product_inv_wh2 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product2,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)
      put :changeorderstatus, {:order_ids=>[order.id], :status=>'cancelled'}
      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      product_inv_wh1.reload
      product_inv_wh2.reload
      order_item1.reload
      order_item2.reload
      expect(product_inv_wh1.allocated_inv).to eq(4)
      expect(product_inv_wh2.allocated_inv).to eq(4)
      expect(product_inv_wh1.available_inv).to eq(26)
      expect(product_inv_wh2.available_inv).to eq(26)
      expect(order_item1.inv_status).to eq('unallocated')
      expect(order_item2.inv_status).to eq('unallocated')
    end

    it "inventory gets adjusted when order is moved from cancelled to awaiting" do
      request.accept = "application/json"
      inv_wh = FactoryGirl.create(:inventory_warehouse)
      store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)
      @user_role.add_edit_order_items = true
      @user_role.save
      general_setting = FactoryGirl.create(:general_setting, :inventory_tracking=>true, :hold_orders_due_to_inventory=>true, :inventory_auto_allocation=>true)
      order = FactoryGirl.create(:order, :status=>'cancelled', :increment_id=>'12345678911', :store => store)
      product1 = FactoryGirl.create(:product)
      product2 = FactoryGirl.create(:product)
      order_item1 = FactoryGirl.create(:order_item, :product_id=>product1.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product1.name)
      order_item2 = FactoryGirl.create(:order_item, :product_id=>product2.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product2.name)
      product_inv_wh1 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product1,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)
      product_inv_wh2 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product2,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)
      product_inv_wh1.reload
      product_inv_wh2.reload
      put :changeorderstatus, {:order_ids=>[order.id], :status=>'awaiting'}
      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      product_inv_wh1.reload
      product_inv_wh2.reload
      order_item1.reload
      order_item2.reload
      expect(product_inv_wh1.allocated_inv).to eq(6)
      expect(product_inv_wh2.allocated_inv).to eq(6)
      expect(product_inv_wh1.available_inv).to eq(24)
      expect(product_inv_wh2.available_inv).to eq(24)
      expect(order_item1.inv_status).to eq('allocated')
      expect(order_item2.inv_status).to eq('allocated')
    end

    it "inventory gets adjusted when order is moved from cancelled to serviceissue" do
      request.accept = "application/json"
      inv_wh = FactoryGirl.create(:inventory_warehouse)
      store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)
      @user_role.add_edit_order_items = true
      @user_role.save
      general_setting = FactoryGirl.create(:general_setting, :inventory_tracking=>true, :hold_orders_due_to_inventory=>true, :inventory_auto_allocation=>true)
      order = FactoryGirl.create(:order, :status=>'cancelled', :increment_id=>'12345678912', :store => store)
      product1 = FactoryGirl.create(:product)
      product2 = FactoryGirl.create(:product)
      order_item1 = FactoryGirl.create(:order_item, :product_id=>product1.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product1.name)
      order_item2 = FactoryGirl.create(:order_item, :product_id=>product2.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product2.name)
      product_inv_wh1 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product1,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)
      product_inv_wh2 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product2,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)
      product_inv_wh1.reload
      product_inv_wh2.reload
      put :changeorderstatus, {:order_ids=>[order.id], :status=>'serviceissue'}
      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      product_inv_wh1.reload
      product_inv_wh2.reload
      order_item1.reload
      order_item2.reload
      expect(product_inv_wh1.allocated_inv).to eq(6)
      expect(product_inv_wh2.allocated_inv).to eq(6)
      expect(product_inv_wh1.available_inv).to eq(24)
      expect(product_inv_wh2.available_inv).to eq(24)
      expect(order_item1.inv_status).to eq('allocated')
      expect(order_item2.inv_status).to eq('allocated')
    end

    it "inventory gets adjusted from available to allocated when item is added to an order" do
      request.accept = "application/json"
      inv_wh = FactoryGirl.create(:inventory_warehouse)
      store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)
      @user_role.add_edit_order_items = true
      @user_role.save
      general_setting = FactoryGirl.create(:general_setting, :inventory_tracking=>true, :hold_orders_due_to_inventory=>true, :inventory_auto_allocation=>true)
      order = FactoryGirl.create(:order, :status=>'awaiting', :increment_id=>'12345678912', :store => store)
      product1 = FactoryGirl.create(:product)
      product2 = FactoryGirl.create(:product)
      
      product_inv_wh1 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product1,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)
      product_inv_wh2 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product2,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)

      order_item1 = FactoryGirl.create(:order_item, :product_id=>product1.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product1.name)

      product_inv_wh1.reload
      product_inv_wh2.reload
      order.reload
      expect(product_inv_wh1.allocated_inv).to eq(6)
      expect(product_inv_wh2.allocated_inv).to eq(5)
      expect(product_inv_wh1.available_inv).to eq(24)
      expect(product_inv_wh2.available_inv).to eq(25)
      expect(order.order_items.size).to eq(1)

      put :additemtoorder, {:id=>order.id, :productids=>[product2.id], :qty=>'1', :price=>"10"}
      expect(response.status).to eq(200)
      result = JSON.parse(response.body)

      product_inv_wh1.reload
      product_inv_wh2.reload
      expect(product_inv_wh1.allocated_inv).to eq(6)
      expect(product_inv_wh2.allocated_inv).to eq(6)
      expect(product_inv_wh1.available_inv).to eq(24)
      expect(product_inv_wh2.available_inv).to eq(24)
      expect(order.order_items.size).to eq(2)
    end

    it "inventory gets adjusted from allocated to available when item is removed from an order" do
      request.accept = "application/json"
      inv_wh = FactoryGirl.create(:inventory_warehouse)
      store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)
      @user_role.add_edit_order_items = true
      @user_role.save
      general_setting = FactoryGirl.create(:general_setting, :inventory_tracking=>true, :hold_orders_due_to_inventory=>true, :inventory_auto_allocation=>true)
      order = FactoryGirl.create(:order, :status=>'awaiting', :increment_id=>'12345678912', :store => store)
      product1 = FactoryGirl.create(:product)
      product2 = FactoryGirl.create(:product)
      
      product_inv_wh1 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product1,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)
      product_inv_wh2 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product2,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)

      order_item1 = FactoryGirl.create(:order_item, :product_id=>product1.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product1.name)
      order_item2 = FactoryGirl.create(:order_item, :product_id=>product2.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product2.name)

      product_inv_wh1.reload
      product_inv_wh2.reload
      order.reload
      expect(product_inv_wh1.allocated_inv).to eq(6)
      expect(product_inv_wh2.allocated_inv).to eq(6)
      expect(product_inv_wh1.available_inv).to eq(24)
      expect(product_inv_wh2.available_inv).to eq(24)
      expect(order.order_items.size).to eq(2)

      put :removeitemfromorder, {:orderitem=>[order_item1.id]}
      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      
      product_inv_wh1.reload
      product_inv_wh2.reload
      order.reload
      expect(product_inv_wh1.allocated_inv).to eq(5)
      expect(product_inv_wh2.allocated_inv).to eq(6)
      expect(product_inv_wh1.available_inv).to eq(25)
      expect(product_inv_wh2.available_inv).to eq(24)
      expect(order.order_items.size).to eq(1)
    end

    it "inventory remains unchanged when order is moved from awaiting to serviceissue" do
      request.accept = "application/json"
      inv_wh = FactoryGirl.create(:inventory_warehouse)
      store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)
      @user_role.add_edit_order_items = true
      @user_role.save
      general_setting = FactoryGirl.create(:general_setting, :inventory_tracking=>true, :hold_orders_due_to_inventory=>true, :inventory_auto_allocation=>true)
      order = FactoryGirl.create(:order, :status=>'awaiting', :increment_id=>'12345678912', :store => store)
      product = FactoryGirl.create(:product)
      
      product_inv_wh = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)

      order_item = FactoryGirl.create(:order_item, :product_id=>product.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product.name, :inv_status=>'allocated')
      
      product_inv_wh.reload
      expect(product_inv_wh.allocated_inv).to eq(5)
      expect(product_inv_wh.available_inv).to eq(25)
      
      put :changeorderstatus, {:order_ids=>[order.id], :status=>'serviceissue'}
      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      
      product_inv_wh.reload
      expect(product_inv_wh.allocated_inv).to eq(5)
      expect(product_inv_wh.available_inv).to eq(25)
      expect(order_item.inv_status).to eq('allocated')
    end

    it "inventory remains unchanged when order is moved from serviceissue to awaiting" do
      request.accept = "application/json"
      inv_wh = FactoryGirl.create(:inventory_warehouse)
      store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)
      @user_role.add_edit_order_items = true
      @user_role.save
      general_setting = FactoryGirl.create(:general_setting, :inventory_tracking=>true, :hold_orders_due_to_inventory=>true, :inventory_auto_allocation=>true)
      order = FactoryGirl.create(:order, :status=>'serviceissue', :increment_id=>'12345678912', :store => store)
      product = FactoryGirl.create(:product)
      
      product_inv_wh = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)

      order_item = FactoryGirl.create(:order_item, :product_id=>product.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product.name, :inv_status=>'allocated')
      
      product_inv_wh.reload
      expect(product_inv_wh.allocated_inv).to eq(5)
      expect(product_inv_wh.available_inv).to eq(25)
      
      put :changeorderstatus, {:order_ids=>[order.id], :status=>'awaiting'}
      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      
      product_inv_wh.reload
      order_item.reload
      expect(product_inv_wh.allocated_inv).to eq(5)
      expect(product_inv_wh.available_inv).to eq(25)
      expect(order_item.inv_status).to eq('allocated')
    end

    it "inventory gets adjusted when order item quantity in order is changed" do
      request.accept = "application/json"
      inv_wh = FactoryGirl.create(:inventory_warehouse)
      store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)
      @user_role.add_edit_order_items = true
      @user_role.save
      general_setting = FactoryGirl.create(:general_setting, :inventory_tracking=>true, :hold_orders_due_to_inventory=>true, :inventory_auto_allocation=>true)
      order = FactoryGirl.create(:order, :status=>'awaiting', :increment_id=>'1234567890', :store => store)
      product1 = FactoryGirl.create(:product)
      product2 = FactoryGirl.create(:product)
      product_inv_wh1 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product1,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)
      product_inv_wh2 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product2,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)
      order_item1 = FactoryGirl.create(:order_item, :product_id=>product1.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product1.name)
      order_item2 = FactoryGirl.create(:order_item, :product_id=>product2.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product2.name)
      product_inv_wh1.reload
      product_inv_wh2.reload
      expect(product_inv_wh1.allocated_inv).to eq(6)
      expect(product_inv_wh2.allocated_inv).to eq(6)
      expect(product_inv_wh1.available_inv).to eq(24)
      expect(product_inv_wh2.available_inv).to eq(24)
      put :updateiteminorder, {:orderitem=>order_item1, :qty=>'2'}
      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      product_inv_wh1.reload
      product_inv_wh2.reload
      order_item1.reload
      order_item2.reload
      expect(product_inv_wh1.allocated_inv).to eq(7)
      expect(product_inv_wh2.allocated_inv).to eq(6)
      expect(product_inv_wh1.available_inv).to eq(23)
      expect(product_inv_wh2.available_inv).to eq(24)
      expect(order_item1.inv_status).to eq('allocated')
      expect(order_item2.inv_status).to eq('allocated')
    end

    it "inventory does not adjust when order item quantity in order is changed, if auto-allocation is off" do
      request.accept = "application/json"
      inv_wh = FactoryGirl.create(:inventory_warehouse)
      store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)
      @user_role.add_edit_order_items = true
      @user_role.save
      general_setting = FactoryGirl.create(:general_setting, :inventory_tracking=>true, :hold_orders_due_to_inventory=>true, :inventory_auto_allocation=>false)
      order = FactoryGirl.create(:order, :status=>'awaiting', :increment_id=>'1234567890', :store => store)
      product1 = FactoryGirl.create(:product)
      product2 = FactoryGirl.create(:product)
      product_inv_wh1 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product1,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)
      product_inv_wh2 = FactoryGirl.create(
        :product_inventory_warehouse, :product=> product2,
        :inventory_warehouse_id =>inv_wh.id, 
        :available_inv => 25, :allocated_inv => 5)
      order_item1 = FactoryGirl.create(:order_item, :product_id=>product1.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product1.name)
      order_item2 = FactoryGirl.create(:order_item, :product_id=>product2.id,
                    :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product2.name)
      product_inv_wh1.reload
      product_inv_wh2.reload
      expect(product_inv_wh1.allocated_inv).to eq(6)
      expect(product_inv_wh2.allocated_inv).to eq(6)
      expect(product_inv_wh1.available_inv).to eq(24)
      expect(product_inv_wh2.available_inv).to eq(24)
      put :updateiteminorder, {:orderitem=>order_item1, :qty=>'2'}
      expect(response.status).to eq(200)
      result = JSON.parse(response.body)
      product_inv_wh1.reload
      product_inv_wh2.reload
      expect(product_inv_wh1.allocated_inv).to eq(6)
      expect(product_inv_wh2.allocated_inv).to eq(6)
      expect(product_inv_wh1.available_inv).to eq(24)
      expect(product_inv_wh2.available_inv).to eq(24)
    end
    
    # it "Changing order status from awaiting/service_issue to scanned and clicking on 'yes' option should update inventory counts from allocated to sold" do
    #   request.accept = "application/json"
    #   inv_wh = FactoryGirl.create(:inventory_warehouse)
    #   store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)
    #   @user_role.change_order_status = true
    #   @user_role.save
    #   order1 = FactoryGirl.create(:order, :status=>'awaiting', :increment_id=>'1234567890', :store => store)
    #   order2 = FactoryGirl.create(:order, :status=>'awaiting', :increment_id=>'1234567891', :store => store)
    #   product1 = FactoryGirl.create(:product)
    #   product2 = FactoryGirl.create(:product)
    #   order_item1 = FactoryGirl.create(:order_item, :product_id=>product1.id,
    #                 :qty=>1, :price=>"10", :row_total=>"10", :order=>order1, :name=>product1.name)
    #   order_item2 = FactoryGirl.create(:order_item, :product_id=>product2.id,
    #                 :qty=>1, :price=>"10", :row_total=>"10", :order=>order2, :name=>product2.name)
    #   product_inv_wh1 = FactoryGirl.create(
    #     :product_inventory_warehouse, :product=> product1,
    #     :inventory_warehouse_id =>inv_wh.id, 
    #     :available_inv => 25, :allocated_inv => 5)
    #   product_inv_wh2 = FactoryGirl.create(
    #     :product_inventory_warehouse, :product=> product2,
    #     :inventory_warehouse_id =>inv_wh.id, 
    #     :available_inv => 25, :allocated_inv => 5)
    #   put :changeorderstatus, {:order_ids=>[order1.id, order2.id],:status=>'scanned',:option=>'yes'}
    #   expect(response.status).to eq(200)
    #   result = JSON.parse(response.body)
    #   expect(result['status']).to eq(true)
    #   product_inv_wh1.reload
    #   product_inv_wh2.reload
    #   expect(product_inv_wh1.allocated_inv).to eq(4)
    #   expect(product_inv_wh2.allocated_inv).to eq(4)
    #   expect(product_inv_wh1.sold_inventory_warehouses.first.sold_qty).to eq(1)
    #   expect(product_inv_wh2.sold_inventory_warehouses.first.sold_qty).to eq(1)
    # end

    # it "Changing order status from awaiting/service_issue to scanned and clicking on 'no' option should update inventory counts from allocated to available" do
    #   request.accept = "application/json"
    #   inv_wh = FactoryGirl.create(:inventory_warehouse)
    #   store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)
    #   @user_role.change_order_status = true
    #   @user_role.save
    #   order1 = FactoryGirl.create(:order, :status=>'awaiting', :increment_id=>'1234567890', :store => store)
    #   order2 = FactoryGirl.create(:order, :status=>'awaiting', :increment_id=>'1234567891', :store => store)
    #   product1 = FactoryGirl.create(:product)
    #   product2 = FactoryGirl.create(:product)
    #   order_item1 = FactoryGirl.create(:order_item, :product_id=>product1.id,
    #                 :qty=>1, :price=>"10", :row_total=>"10", :order=>order1, :name=>product1.name)
    #   order_item2 = FactoryGirl.create(:order_item, :product_id=>product2.id,
    #                 :qty=>1, :price=>"10", :row_total=>"10", :order=>order2, :name=>product2.name)
    #   product_inv_wh1 = FactoryGirl.create(
    #     :product_inventory_warehouse, :product=> product1,
    #     :inventory_warehouse_id =>inv_wh.id, 
    #     :available_inv => 25, :allocated_inv => 5)
    #   product_inv_wh2 = FactoryGirl.create(
    #     :product_inventory_warehouse, :product=> product2,
    #     :inventory_warehouse_id =>inv_wh.id, 
    #     :available_inv => 25, :allocated_inv => 5)
    #   put :changeorderstatus, {:order_ids=>[order1.id, order2.id],:status=>'scanned',:option=>'no'}
    #   expect(response.status).to eq(200)
    #   result = JSON.parse(response.body)
    #   expect(result['status']).to eq(true)
    #   product_inv_wh1.reload
    #   product_inv_wh2.reload
    #   expect(product_inv_wh1.allocated_inv).to eq(4)
    #   expect(product_inv_wh2.allocated_inv).to eq(4)
    #   expect(product_inv_wh1.available_inv).to eq(26)
    #   expect(product_inv_wh2.available_inv).to eq(26)
    # end

    # it "Changing order status from cancelled to scanned and clicking on 'yes' option should update inventory counts from available to sold" do
    #   request.accept = "application/json"
    #   inv_wh = FactoryGirl.create(:inventory_warehouse)
    #   store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)
    #   @user_role.change_order_status = true
    #   @user_role.save
    #   order1 = FactoryGirl.create(:order, :status=>'cancelled', :increment_id=>'1234567890', :store => store)
    #   order2 = FactoryGirl.create(:order, :status=>'cancelled', :increment_id=>'1234567891', :store => store)
    #   product1 = FactoryGirl.create(:product)
    #   product2 = FactoryGirl.create(:product)
    #   order_item1 = FactoryGirl.create(:order_item, :product_id=>product1.id,
    #                 :qty=>1, :price=>"10", :row_total=>"10", :order=>order1, :name=>product1.name)
    #   order_item2 = FactoryGirl.create(:order_item, :product_id=>product2.id,
    #                 :qty=>1, :price=>"10", :row_total=>"10", :order=>order2, :name=>product2.name)
    #   product_inv_wh1 = FactoryGirl.create(
    #     :product_inventory_warehouse, :product=> product1,
    #     :inventory_warehouse_id =>inv_wh.id, 
    #     :available_inv => 25, :allocated_inv => 5)
    #   product_inv_wh2 = FactoryGirl.create(
    #     :product_inventory_warehouse, :product=> product2,
    #     :inventory_warehouse_id =>inv_wh.id, 
    #     :available_inv => 25, :allocated_inv => 5)
    #   put :changeorderstatus, {:order_ids=>[order1.id, order2.id],:status=>'scanned',:option=>'yes'}
    #   expect(response.status).to eq(200)
    #   result = JSON.parse(response.body)
    #   expect(result['status']).to eq(true)
    #   product_inv_wh1.reload
    #   product_inv_wh2.reload
    #   expect(product_inv_wh1.available_inv).to eq(24)
    #   expect(product_inv_wh2.available_inv).to eq(24)
    #   expect(product_inv_wh1.sold_inventory_warehouses.first.sold_qty).to eq(1)
    #   expect(product_inv_wh2.sold_inventory_warehouses.first.sold_qty).to eq(1)
    # end

    # it "Changing order status from cancelled to scanned and clicking on 'no' option should not update inventory" do
    #   request.accept = "application/json"
    #   inv_wh = FactoryGirl.create(:inventory_warehouse)
    #   store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)
    #   @user_role.change_order_status = true
    #   @user_role.save
    #   order1 = FactoryGirl.create(:order, :status=>'cancelled', :increment_id=>'1234567890', :store => store)
    #   order2 = FactoryGirl.create(:order, :status=>'cancelled', :increment_id=>'1234567891', :store => store)
    #   product1 = FactoryGirl.create(:product)
    #   product2 = FactoryGirl.create(:product)
    #   order_item1 = FactoryGirl.create(:order_item, :product_id=>product1.id,
    #                 :qty=>1, :price=>"10", :row_total=>"10", :order=>order1, :name=>product1.name)
    #   order_item2 = FactoryGirl.create(:order_item, :product_id=>product2.id,
    #                 :qty=>1, :price=>"10", :row_total=>"10", :order=>order2, :name=>product2.name)
    #   product_inv_wh1 = FactoryGirl.create(
    #     :product_inventory_warehouse, :product=> product1,
    #     :inventory_warehouse_id =>inv_wh.id, 
    #     :available_inv => 25, :allocated_inv => 5)
    #   product_inv_wh2 = FactoryGirl.create(
    #     :product_inventory_warehouse, :product=> product2,
    #     :inventory_warehouse_id =>inv_wh.id, 
    #     :available_inv => 25, :allocated_inv => 5)
    #   put :changeorderstatus, {:order_ids=>[order1.id, order2.id],:status=>'scanned',:option=>'no'}
    #   expect(response.status).to eq(200)
    #   result = JSON.parse(response.body)
    #   expect(result['status']).to eq(true)
    #   product_inv_wh1.reload
    #   product_inv_wh2.reload
    #   order1.reload
    #   order2.reload
    #   expect(product_inv_wh1.available_inv).to eq(25)
    #   expect(product_inv_wh2.available_inv).to eq(25)
    #   expect(product_inv_wh1.allocated_inv).to eq(5)
    #   expect(product_inv_wh2.allocated_inv).to eq(5)
    #   expect(order1.status).to eq('scanned')
    #   expect(order1.status).to eq('scanned')
    # end
  end

  # describe "GET order pick list" do
    #it "retrieves pick list for an order" do
      # request.accept = "application/json"

      # #set up of data      
      # #Inventory warehouse
      # inv_wh = FactoryGirl.create(:inventory_warehouse)
      
      # #Store
      # store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)

      # #Create products
      # product = FactoryGirl.create(:product)

      # product_sku = FactoryGirl.create(:product_sku, :sku=>'IPHONE5C', 
      # 	:product=> product)
      # product_inv_wh = FactoryGirl.create(
      # 	:product_inventory_warehouse, :product=> product,
      #   :inventory_warehouse_id =>inv_wh.id, 
      #   :available_inv => 25)

      # #Order
      # order = FactoryGirl.create(:order, :status=>'awaiting', :store=>store)
      
      # #Order item
      # order_item = FactoryGirl.create(:order_item, :product_id=>product.id,
      #               :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product.name)

      # #execution
      # get :generate_pick_list, {:id => order.id}

      # #expectations
      # expect(response.status).to eq(200)
      # result = JSON.parse(response.body)
      # expect(result["status"]).to eq(true)

      # expect(result["data"]["pick_list"].length).to eq(1)
 
      # expect(result["data"]["pick_list"].first["sku"]).
      # 	to eq("IPHONE5C")
      # expect(result["data"]["pick_list"].first["primary_location"]).
      # 	to eq("A1")
      # expect(result["data"]["pick_list"].first["secondary_location"]).
      # 	to eq("H4")
      # expect(result["data"]["pick_list"].first["name"]).
      # 	to eq("Apple iPhone 5S")
    #end

    # it "checks length of pick list" do
    #   request.accept = "application/json"

    #   #set up of data      
    #   #Inventory warehouse
    #   inv_wh = FactoryGirl.create(:inventory_warehouse)
      
    #   #Store
    #   store = FactoryGirl.create(:store, :inventory_warehouse_id => inv_wh.id)

    #   #Create products
    #   product = FactoryGirl.create(:product)
    #   product1 = FactoryGirl.create(:product, :name=>'iPhone 5C')

    #   product_sku = FactoryGirl.create(:product_sku, 
    #   	:product=> product)
    #   product_sku1 = FactoryGirl.create(:product_sku, :sku=>'IPHONE5C', 
    #   	:product=> product1)

    #   product_inv_wh = FactoryGirl.create(:product_inventory_warehouse, :product=> product,
    #     :inventory_warehouse_id =>inv_wh.id, 
    #     :available_inv => 25)
    #   product_inv_wh1 = FactoryGirl.create(
    #   	:product_inventory_warehouse, :product=> product1,
    #     :inventory_warehouse_id =>inv_wh.id, 
    #     :available_inv => 25)

    #   #Order
    #   order = FactoryGirl.create(:order, :status=>'awaiting', :store=>store)
      
    #   #Order item
    #   order_item = FactoryGirl.create(:order_item, :product_id=>product.id,
    #                 :qty=>1, :price=>"10", :row_total=>"10", :order=>order, :name=>product.name)
    #   order_item1 = FactoryGirl.create(:order_item, :product_id=>product1.id,
    #                 :qty=>1, :price=>"100", :row_total=>"100", :order=>order, :name=>product.name)
    #   order_item2 = FactoryGirl.create(:order_item, :product_id=>product.id,
    #                 :qty=>1, :price=>"100", :row_total=>"100", :order=>order, :name=>product.name)

    #   #execution
    #   get :generate_pick_list, {:id => order.id}

    #   #expectations
    #   expect(response.status).to eq(200)
    #   result = JSON.parse(response.body)
    #   expect(result["status"]).to eq(true)

    #   expect(result["data"]["pick_list"].length).to eq(2)
    #   expect(result["data"]["pick_list"][0]["sku"]).
    #   	to eq("IPHONE5S")
    #   expect(result["data"]["pick_list"][0]["primary_location"]).
    #   	to eq("A1")
    #   expect(result["data"]["pick_list"][0]["secondary_location"]).
    #   	to eq("H4")
    #   expect(result["data"]["pick_list"][0]["name"]).
    #   	to eq("Apple iPhone 5S")
    #   expect(result["data"]["pick_list"][0]["qty"]).
    #   	to eq(2)


    #   expect(result["data"]["pick_list"][1]["sku"]).
    #   	to eq("IPHONE5C")
    #   expect(result["data"]["pick_list"][1]["primary_location"]).
    #   	to eq("A1")
    #   expect(result["data"]["pick_list"][1]["secondary_location"]).
    #   	to eq("H4")
    #   expect(result["data"]["pick_list"][1]["name"]).
    #   	to eq("iPhone 5C")
    #   expect(result["data"]["pick_list"][1]["qty"]).
    #   	to eq(1)  

    # end

    # it "for products with kit_parsing as single" do
    #   request.accept = "application/json"

    #   #set up of data      
    #   #Inventory warehouse
    #   inv_wh = FactoryGirl.create(:inventory_warehouse)

    #   store = FactoryGirl.create(:store, 
    #     :inventory_warehouse_id => inv_wh.id)

    #   #Order
    #   order = FactoryGirl.create(:order, :status=>'awaiting', 
    #     :store=>store)

    #   #Create products
    #   product = FactoryGirl.create(:product)

    #   product_sku = FactoryGirl.create(:product_sku, 
    #     :product=> product)

    #   order_item = FactoryGirl.create(:order_item, 
    #     :product_id=>product.id,
    #     :qty=>1, :price=>"10", :row_total=>"10", 
    #     :order=>order, :name=>product.name)

    #   product_kit = FactoryGirl.create(:product, 
    #     :is_kit => 1, :name=>'iPhone Protection Kit',
    #     :kit_parsing=>'single')

    #   product_kit_sku = FactoryGirl.create(:product_sku, 
    #     :product=> product_kit, :sku=> 'IPROTO')

    #   product_kit_inv_wh = FactoryGirl.create(:product_inventory_warehouse, 
    #     :product=> product_kit,
    #     :inventory_warehouse_id =>inv_wh.id, :available_inv => 25)

    #   order_item_kit = FactoryGirl.create(:order_item, 
    #     :product_id=>product_kit.id, :qty=>2, :price=>"10", 
    #     :row_total=>"10", :order=>order, :name=>product_kit.name)

    #   #execution
    #   get :generate_pick_list, {:order_ids=>[order.id, order.id, order.id] }

    #   #expectations
    #   expect(response.status).to eq(200)
    #   result = JSON.parse(response.body)
    #   expect(result["status"]).to eq(true)

    #   expect(result["data"]["pick_list"].length).to eq(2)

    #   expect(result["data"]["pick_list"][0]["sku"]).
    #     to eq("IPHONE5S")
    #   expect(result["data"]["pick_list"][0]["primary_location"]).
    #     to eq("-")
    #   expect(result["data"]["pick_list"][0]["secondary_location"]).
    #     to eq("-")
    #   expect(result["data"]["pick_list"][0]["name"]).
    #     to eq("Apple iPhone 5S")
    #   expect(result["data"]["pick_list"][0]["qty"]).
    #     to eq(3)

    #   expect(result["data"]["pick_list"][1]["sku"]).
    #     to eq("IPROTO")
    #   expect(result["data"]["pick_list"][1]["primary_location"]).
    #     to eq("A1")
    #   expect(result["data"]["pick_list"][1]["secondary_location"]).
    #     to eq("H4")
    #   expect(result["data"]["pick_list"][1]["name"]).
    #     to eq("iPhone Protection Kit")
    #   expect(result["data"]["pick_list"][1]["qty"]).
    #     to eq(6)


    # end
    # it "for products with kit_parsing as individual" do
    #   request.accept = "application/json"

    #   inv_wh = FactoryGirl.create(:inventory_warehouse)

    #   store = FactoryGirl.create(:store, 
    #     :inventory_warehouse_id => inv_wh.id)

    #   #Order
    #   order = FactoryGirl.create(:order, :status=>'awaiting', 
    #     :store=>store)
      

    #   #Create products
    #   # product = FactoryGirl.create(:product)
    #   product_kit = FactoryGirl.create(:product, 
    #     :is_kit => 1, :name=>'iPhone Protection Kit',
    #     :kit_parsing=>'individual')

    #   product_kit_inv_wh = FactoryGirl.create(
    #     :product_inventory_warehouse, :product=> product_kit,
    #     :inventory_warehouse_id =>inv_wh.id, :available_inv => 25)
    #   #kit_product #1
    #   kit_product = FactoryGirl.create(:product, 
    #     :name=>'Apple iPhone 5C')
    #   product_kit_sku = FactoryGirl.create(:product_kit_sku, 
    #     :product => product_kit, :id=>product_kit.id, :option_product_id=>kit_product.id, 
    #     :qty=>2)
    #   kit_product_sku = FactoryGirl.create(:product_sku, 
    #     :product=> kit_product, :sku=> 'IPROTO1')
    #   kit_product_inv_wh = FactoryGirl.create(:product_inventory_warehouse, 
    #     :product=> kit_product,
    #     :inventory_warehouse_id =>inv_wh.id, :available_inv => 25)

      
    #   #kit_product #2
    #   kit_product1 = FactoryGirl.create(:product, 
    #     :name=>'Apple iPhone 5S')
    #   product_kit_sku1 = FactoryGirl.create(:product_kit_sku, 
    #     :product => product_kit,  
    #     :option_product_id=>kit_product1.id, 
    #     :qty=>1)
    #   kit_product_sku1 = FactoryGirl.create(:product_sku, 
    #     :product=> kit_product1, :sku=> 'IPROTO2')
    #   kit_product_inv_wh1 = FactoryGirl.create(:product_inventory_warehouse, 
    #     :product=> kit_product1,
    #     :inventory_warehouse_id =>inv_wh.id, :available_inv => 25)

    #   #kit_product #3
    #   kit_product2 = FactoryGirl.create(:product, 
    #     :name=>'Apple iPhone 5D')
    #   product_kit_sku2 = FactoryGirl.create(:product_kit_sku, 
    #     :product => product_kit,  
    #     :option_product_id=>kit_product2.id, 
    #     :qty=>3)
    #   kit_product_sku2 = FactoryGirl.create(:product_sku, 
    #     :product=> kit_product2, :sku=> 'IPROTO3')
    #   kit_product_inv_wh2 = FactoryGirl.create(:product_inventory_warehouse, 
    #     :product=> kit_product2,
    #     :inventory_warehouse_id =>inv_wh.id, :available_inv => 25)

    #   order_item_kit = FactoryGirl.create(:order_item, 
    #     :product_id=>product_kit.id, :qty=>2, :price=>"10", 
    #     :row_total=>"10", :order=>order)

    #   #execution
    #   get :generate_pick_list, {:order_ids=>[order.id, order.id, order.id] }

    #   #expectations
    #   expect(response.status).to eq(200)
    #   result = JSON.parse(response.body)
    #   expect(result["status"]).to eq(true)

    #   expect(result["data"]["pick_list"].length).to eq(3)

    #   expect(result["data"]["pick_list"][0]["sku"]).
    #     to eq("IPROTO1")
    #   expect(result["data"]["pick_list"][0]["primary_location"]).
    #     to eq("A1")
    #   expect(result["data"]["pick_list"][0]["secondary_location"]).
    #     to eq("H4")
    #   expect(result["data"]["pick_list"][0]["name"]).
    #     to eq("Apple iPhone 5C")
    #   expect(result["data"]["pick_list"][0]["qty"]).
    #     to eq(12)

    #   expect(result["data"]["pick_list"][1]["sku"]).
    #     to eq("IPROTO2")
    #   expect(result["data"]["pick_list"][1]["primary_location"]).
    #     to eq("A1")
    #   expect(result["data"]["pick_list"][1]["secondary_location"]).
    #     to eq("H4")
    #   expect(result["data"]["pick_list"][1]["name"]).
    #     to eq("Apple iPhone 5S")
    #   expect(result["data"]["pick_list"][1]["qty"]).
    #     to eq(6)

    #   expect(result["data"]["pick_list"][2]["sku"]).
    #     to eq("IPROTO3")
    #   expect(result["data"]["pick_list"][2]["primary_location"]).
    #     to eq("A1")
    #   expect(result["data"]["pick_list"][2]["secondary_location"]).
    #     to eq("H4")
    #   expect(result["data"]["pick_list"][2]["name"]).
    #     to eq("Apple iPhone 5D")
    #   expect(result["data"]["pick_list"][2]["qty"]).
    #     to eq(18)

    # end
    # it "for products with kit_parsing as depends" do
    #   request.accept = "application/json"

    #   inv_wh = FactoryGirl.create(:inventory_warehouse)

    #   store = FactoryGirl.create(:store, 
    #     :inventory_warehouse_id => inv_wh.id)

    #   #Order
    #   order = FactoryGirl.create(:order, :status=>'awaiting', 
    #     :store=>store)
      

    #   #Create products
    #   product_kit = FactoryGirl.create(:product, 
    #     :is_kit => 1, :name=>'iPhone Protection Kit',
    #     :kit_parsing=>'depends')

    #   product_kit_sku = FactoryGirl.create(:product_sku, 
    #     :product=> product_kit, :sku=> 'IPHONE PROTECTION')

    #   product_kit_inv_wh = FactoryGirl.create(
    #     :product_inventory_warehouse, :product=> product_kit,
    #     :inventory_warehouse_id =>inv_wh.id, :available_inv => 25)
      
    #   #kit_product #1
    #   kit_product = FactoryGirl.create(:product, 
    #     :name=>'Apple iPhone 5C')

    #   kit_product_sku = FactoryGirl.create(:product_sku, 
    #     :product=> kit_product, :sku=> 'IPROTO1')

    #   kit_product_inv_wh = FactoryGirl.create(:product_inventory_warehouse, 
    #     :product=> kit_product,
    #     :inventory_warehouse_id =>inv_wh.id, :available_inv => 25)
      
    #   product_kit_sku_1 = FactoryGirl.create(:product_kit_sku, 
    #     :product => product_kit, :option_product_id=>kit_product.id, 
    #     :qty=>2)

    #   #kit_product #2
    #   kit_product2 = FactoryGirl.create(:product, 
    #     :name=>'Apple iPhone 5D')

    #   kit_product_sku2 = FactoryGirl.create(:product_sku, 
    #     :product=> kit_product2, :sku=> 'IPROTO2')

    #   kit_product_inv_wh2 = FactoryGirl.create(:product_inventory_warehouse, 
    #     :product=> kit_product2,
    #     :inventory_warehouse_id =>inv_wh.id, :available_inv => 25)
      
    #   product_kit_sku_2 = FactoryGirl.create(:product_kit_sku, 
    #     :product => product_kit, :option_product_id=>kit_product2.id, 
    #     :qty=>2)

    #   order_item_kit = FactoryGirl.create(:order_item, 
    #     :product_id=>product_kit.id, :qty=>2, :price=>"10", 
    #     :row_total=>"10", :order=>order)

    #   get :generate_pick_list, {:order_ids=>[order.id, order.id, order.id]}

    #   #expectations
    #   expect(response.status).to eq(200)
    #   result = JSON.parse(response.body)
    #   expect(result["status"]).to eq(true)

    #   expect(result["data"]["depends_pick_list"].first["single"].length).to eq(1)

    #   expect(result["data"]["depends_pick_list"].first["single"][0]["sku"]).
    #     to eq("IPHONE PROTECTION")
    #   expect(result["data"]["depends_pick_list"].first["single"][0]["primary_location"]).
    #     to eq("A1")
    #   expect(result["data"]["depends_pick_list"].first["single"][0]["secondary_location"]).
    #     to eq("H4")
    #   expect(result["data"]["depends_pick_list"].first["single"][0]["name"]).
    #     to eq("iPhone Protection Kit")
    #   expect(result["data"]["depends_pick_list"].first["single"][0]["qty"]).
    #     to eq(6)

    #   expect(result["data"]["depends_pick_list"].first["individual"].length).to eq(2)

    #   expect(result["data"]["depends_pick_list"].first["individual"][0]["sku"]).
    #     to eq("IPROTO1")
    #   expect(result["data"]["depends_pick_list"].first["individual"][0]["primary_location"]).
    #     to eq("A1")
    #   expect(result["data"]["depends_pick_list"].first["individual"][0]["secondary_location"]).
    #     to eq("H4")
    #   expect(result["data"]["depends_pick_list"].first["individual"][0]["name"]).
    #     to eq("Apple iPhone 5C")
    #   expect(result["data"]["depends_pick_list"].first["individual"][0]["qty"]).
    #     to eq(12)

    #   expect(result["data"]["depends_pick_list"].first["individual"][1]["sku"]).
    #     to eq("IPROTO2")
    #   expect(result["data"]["depends_pick_list"].first["individual"][1]["primary_location"]).
    #     to eq("A1")
    #   expect(result["data"]["depends_pick_list"].first["individual"][1]["secondary_location"]).
    #     to eq("H4")
    #   expect(result["data"]["depends_pick_list"].first["individual"][1]["name"]).
    #     to eq("Apple iPhone 5D")
    #   expect(result["data"]["depends_pick_list"].first["individual"][1]["qty"]).
    #     to eq(12)
    # end
  # end
end
